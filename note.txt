#4 cách tạo và dùng dependency injection
*tạo 2 class service và controller
trong service có 1 cái decorator @Injectable
trong controller có 1 cái decorator @controller
*sau đó import cả 2 vào app.module rồi sử dụng
trong controller thì chỉ cần tạo contructor import service vào r dùng 
hàm của nó


#5
npx nest g module/service/controller user
-> để tạo 1 module/service/controller mới tên là user


#6 cách tích hợp orm và tạo table đầu tiên
serach key word : nestjs database

-> tải : npm install --save @nestjs/typeorm typeorm mysql2


r import :

TypeOrmModule.forRoot({
      type: 'mysql',
      host: 'localhost',
      port: 3306,
      username: 'root',
      password: 'root',
      database: 'test',
      entities: [],
      synchronize: true,
    }),

    vô trong app.modules.ts

để tạo 1 table 
1. tạo 1 entities 

ví dụ entities User 
            
            import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

            @Entity()
            export class User {
            @PrimaryGeneratedColumn()
            id: number;

            @Column()
            firstName: string;

            @Column()
            lastName: string;

            @Column({ default: true })
            isActive: boolean;
            }


sau khi tạo muốn nó tự generate ra thì phải gọi nó vô entities trong module


#7 crud voi typeorm
sau khi tạo entities và generate ra dc bảng thì import type orm vô module của user để dùng
==> 
    TypeOrmModule.forFeature([User])

sau đó tạo 1 repository trong service
=>
    constructor(@InjectRepository(User) private userRepo : Repository<User>) {}

sau đó tạo 1 phương thức post để tạo user
==>
    createUser(body: any) {
        const { email, password } = body
        
        const user = this.userRepo.create({ email, password });
         
        return this.userRepo.save(user);;
    }

và bên controller nhận về và gọi
==> 
    @Post()
    createUser(@Body() body: any) { 
        return this.userService.createUser(body);
    }

#8 crud voi typeorm

sau đó giờ làm findAll(),findOne,update,delete
