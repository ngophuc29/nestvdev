#4 cách tạo và dùng dependency injection
*tạo 2 class service và controller
trong service có 1 cái decorator @Injectable
trong controller có 1 cái decorator @controller
*sau đó import cả 2 vào app.module rồi sử dụng
trong controller thì chỉ cần tạo contructor import service vào r dùng 
hàm của nó


#5
npx nest g module/service/controller user
-> để tạo 1 module/service/controller mới tên là user


#6 cách tích hợp orm và tạo table đầu tiên
serach key word : nestjs database

-> tải : npm install --save @nestjs/typeorm typeorm mysql2


r import :

TypeOrmModule.forRoot({
      type: 'mysql',
      host: 'localhost',
      port: 3306,
      username: 'root',
      password: 'root',
      database: 'test',
      entities: [],
      synchronize: true,
    }),

    vô trong app.modules.ts

để tạo 1 table 
1. tạo 1 entities 

ví dụ entities User 
            
            import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

            @Entity()
            export class User {
            @PrimaryGeneratedColumn()
            id: number;

            @Column()
            firstName: string;

            @Column()
            lastName: string;

            @Column({ default: true })
            isActive: boolean;
            }


sau khi tạo muốn nó tự generate ra thì phải gọi nó vô entities trong module


#7 crud voi typeorm
sau khi tạo entities và generate ra dc bảng thì import type orm vô module của user để dùng
==> 
    TypeOrmModule.forFeature([User])

sau đó tạo 1 repository trong service
=>
    constructor(@InjectRepository(User) private userRepo : Repository<User>) {}

sau đó tạo 1 phương thức post để tạo user
==>
    createUser(body: any) {
        const { email, password } = body
        
        const user = this.userRepo.create({ email, password });
         
        return this.userRepo.save(user);;
    }

và bên controller nhận về và gọi
==> 
    @Post()
    createUser(@Body() body: any) { 
        return this.userService.createUser(body);
    }

#8 crud voi typeorm

sau đó giờ làm findAll(),findOne,update,delete


#9 lam` pipe 
key word pipes
=> dùng để validation và transform dữ liệu

đầu tiên là parse giá trị của param sang int từ controller
==>
        @Param('id', ParseIntPipe) id: number,


tiếp theo là transform dữ liệu thay vì dùng any thì dùng đúng dữ liệu của nó
*tạo 1 folder dtos trong này sẽ chứa dtos cho từng method crud

ví dụ dto cho create
==>     
            export class createDtoUser{

                email: string;
                password: string;
            }

sau khi tạo thì tuyền nó vô controller và service

controller  :

trước =>>
            @Post()
            createUser(@Body() body: any) { 
                return this.userService.createUser(body);
            }

sau ==>
            @Post()
            createUser(@Body() body: createDtoUser) { 
                return this.userService.createUser(body);
            }


service :

trước =>>
         async createUser(body: any) {
            const { email, password } = body

            const user = this.userRepo.create({ email, password });

            return await this.userRepo.save(user);;
        }


sau ==>

             async createUser(body: createDtoUser) {
                const { email, password } = body

                const user = this.userRepo.create({ email, password });

                return await this.userRepo.save(user);;
            }


tiếp đến search key word validation
==> 
 npm i --save class-validator class-transformer
 
 nó sẽ giúp validation dữ liệu đầu vào tốt hơn

 muốn dùng dc nó thì phải config vô trong main.ts

 ==>
        app.useGlobalPipes(new ValidationPipe());

 thêm nó vào trong main.ts (trong tài liệu có hd cách dùng)

 ==> sau ghi import nó vào trong main thì gọi các phương thức của nó vào trong dtos

trước ==>

            export class createDtoUser{

                email: string;
                password: string;
            }

sau ==>
                
            import { IsEmail, IsNotEmpty } from 'class-validator';

            export class createDtoUser {
                @IsEmail()
                email: string;

                @IsNotEmpty()
                password: string;
            }


đây là thông báo validation ở server khi mà validation
            {
                "message": [
                    "email must be an email"
                ],
                "error": "Bad Request",
                "statusCode": 400
            }

